$custom-box-element-separator: "__" !default;
$custom-box-type: null;

$custom-box-theme: (
    base: (
        container: (
            background-color: blue,
            border: none,
            size: 1rem,
            checked: (
                background-color: black
            )
        ),
        tick: (
            background-color: white
        )
    ),
    checkbox: (),
    radiobox: ()
);

@function custom-box-property($property, $element, $state: null) {
    @if map-has-key(map-get($custom-box-theme, $custom-box-type), $element) and
        map-has-key(map-get(map-get($custom-box-theme, $custom-box-type), $element), $property) {
        @return map-get(map-get($custom-box-theme, $custom-box-type), $property);
    }
    @else {
        @if $state == null {
            @return map-get(map-get(map-get($custom-box-theme, base), $element), $property);
        }
        @else {
            @return map-get(map-get(map-get(map-get($custom-box-theme, base), $element), $state), $property);
        }
    }
}

@mixin throw-error-if-not-nested($value, $mixin) {
    @if $value == null {
        @error "Usage of the '#{$mixin}' mixin must be nested inside the 'custom-box' mixin";
    }
}

@mixin custom-box($block, $type: checkbox) {
    $custom-box-type: $type !global;

    .#{$block} {
        box-sizing: border-box;
        position: relative;

        @content;
    }
}

@mixin custom-box-input($element: input) {
    @include throw-error-if-not-nested(&, custom-box-input);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            opacity: 0;
            position: absolute;

            @content;
        }
    }
}

@mixin custom-box-label($element: label) {
    @include throw-error-if-not-nested(&, custom-box-label);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            box-sizing: border-box;
            display: inline-flex;
            position: relative;

            &:before {
                background-color: custom-box-property(background-color, container);
                border: custom-box-property(border, container);
                box-sizing: border-box;
                content: '';
                display: block;
                flex: 0 0 custom-box-property(size, container);
                height: custom-box-property(size, container);
                margin-right: .5rem;
                min-width: custom-box-property(size, container);
                transition: all .1s ease-in-out;

                @if $custom-box-type == radiobox {
                    border-radius: 50%;
                }

                // TODO Add focus styles
            }

            &:after {
                box-sizing: border-box;
                content: '';
                opacity: 0;
                position: absolute;
                transform: scale(.5);
                transition: all .1s ease-in-out;
                visibility: hidden;

                @if $custom-box-type == checkbox {
                    border-bottom: 3px solid custom-box-property(background-color, tick);
                    border-right: 3px solid custom-box-property(background-color, tick);
                    height: .6rem;
                    left: .075rem;
                    top: .2rem;
                    transform: scale(.5) rotate(40deg);
                    transform-origin: bottom right;
                    width: .4rem;
                }

                @if $custom-box-type == radiobox {
                    background-color: custom-box-property(background-color, tick);
                    border-radius: 50%;
                    height: .5rem;
                    left: .25rem;
                    top: .25rem;
                    width: .5rem;
                }
            }

            @content;
        }
    }

    @at-root {
        $input: 'input[type="checkbox"]:checked';
        $transform: scale(1) rotate(40deg);

        @if $custom-box-type == radiobox {
            $input: 'input[type="radio"]:checked';
            $transform: scale(1);
        }

        #{&} > #{$input} + #{&}#{$custom-box-element-separator + $element} {
            &:before {
                background-color: custom-box-property(background-color, container, checked);
            }

            &:after {
                opacity: 1;
                transform: $transform;
                visibility: visible;
            }
        }
    }
}
