@import "functions/map-helpers";
@import "functions/deep-map-merge";

$custom-box-element-separator: "__" !default;
$custom-box-theme: () !default;
$custom-box-checkbox-theme: () !default;
$custom-box-radiobox-theme: () !default;

$custom-box-type: null;

$custom-box-default-theme: (
    container: (
        _checked: (
            background-color: red
        ),
        _focus: (
            box-shadow: 0 0 5px blue
        ),
        background-color: blue,
        border: none,
        border-radius: 0,
        height: 1em,
        margin: 0 .5em 0 0,
        transition: all .1s ease-in-out,
        width: 1em
),
    tick: (
        background-color: white,
        transition: all .1s ease-in-out
    )
);

$custom-box-default-checkbox-theme: (
    tick: (
        height: .6em,
        left: .075em,
        top: .2em,
        width: .4em
    )
);
$custom-box-default-radiobox-theme: (
    container: (
        border-radius: 50%,
    ),
    tick: (
        border-radius: 50%,
        height: .5em,
        left: .25em,
        top: .25em,
        width: .5em
    )
);

@function get-custom-box-theme() {
    $user-theme: deep-map-merge($custom-box-theme, if($custom-box-type == checkbox, $custom-box-checkbox-theme, $custom-box-radiobox-theme));
    $default-theme: deep-map-merge($custom-box-default-theme, if($custom-box-type == checkbox, $custom-box-default-checkbox-theme, $custom-box-default-radiobox-theme));
    @return deep-map-merge($default-theme, $user-theme);
}

@function get-custom-box-property($key) {
    @return get($key, get-custom-box-theme());
}

@mixin throw-error-if-not-nested($value, $mixin) {
    @if $value == null {
        @error "Usage of the '#{$mixin}' mixin must be nested inside the 'custom-box' mixin";
    }
}

@mixin custom-box($block, $type: checkbox) {
    $custom-box-type: $type !global;

    .#{$block} {
        box-sizing: border-box;
        position: relative;

        @content;
    }
}

@mixin custom-box-input($element: input) {
    @include throw-error-if-not-nested(&, custom-box-input);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            opacity: 0;
            position: absolute;

            @content;
        }
    }
}

@mixin custom-box-label($element: label) {
    @include throw-error-if-not-nested(&, custom-box-label);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            box-sizing: border-box;
            display: inline-flex;
            position: relative;

            &:before {
                background-color: get-custom-box-property('container.background-color');
                border: get-custom-box-property('container.border');
                border-radius: get-custom-box-property('container.border-radius');
                box-sizing: border-box;
                content: '';
                display: block;
                flex: 0 0 get-custom-box-property('container.width');
                height: get-custom-box-property('container.height');
                margin: get-custom-box-property('container.margin');
                min-width: get-custom-box-property('container.width');
                transition: get-custom-box-property('container.transition');
            }

            &:after {
                box-sizing: border-box;
                content: '';
                left: get-custom-box-property('tick.left');
                opacity: 0;
                position: absolute;
                top: get-custom-box-property('tick.top');
                transform: scale(.5);
                transition: get-custom-box-property('container.transition');
                visibility: hidden;

                @if $custom-box-type == checkbox {
                    border-bottom: 3px solid get-custom-box-property('tick.background-color');
                    border-right: 3px solid get-custom-box-property('tick.background-color');
                    height: get-custom-box-property('tick.height');
                    transform: scale(.5) rotate(40deg);
                    transform-origin: bottom right;
                    width: get-custom-box-property('tick.width');
                }

                @if $custom-box-type == radiobox {
                    background-color: get-custom-box-property('tick.background-color');
                    border-radius: get-custom-box-property('tick.border-radius');
                    height: get-custom-box-property('tick.height');
                    width: get-custom-box-property('tick.width');
                }
            }

            @content;
        }
    }

    @at-root {
        $input: 'input[type="checkbox"]';
        $transform: scale(1) rotate(40deg);

        @if $custom-box-type == radiobox {
            $input: 'input[type="radio"]';
            $transform: scale(1);
        }

        #{&} > #{$input}:checked + #{&}#{$custom-box-element-separator + $element} {
            &:before {
                background-color: get-custom-box-property('container._checked.background-color');
            }

            &:after {
                opacity: 1;
                transform: $transform;
                visibility: visible;
            }
        }

        #{&} > #{$input}:focus + #{&}#{$custom-box-element-separator + $element} {
            &:before {
                box-shadow: get-custom-box-property('container._focus.box-shadow');
            }
        }
    }
}
